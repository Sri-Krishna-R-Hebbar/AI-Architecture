const puppeteer = require('puppeteer');

/**
 * generatePdfFromSvg
 * @param {Object} param0
 * @param {string} param0.title
 * @param {string} param0.problem
 * @param {string} param0.svg - the raw SVG string (should include <svg ...>...</svg>)
 * @returns {Buffer} - PDF buffer
 */
async function generatePdfFromSvg({ title, problem, svg }) {
  // basic HTML wrapper
  const html = `
  <!doctype html>
  <html>
    <head>
      <meta charset="utf-8" />
      <title>${escapeHtml(title)}</title>
      <style>
        body { font-family: Arial, Helvetica, sans-serif; margin: 24px; color: #111; }
        .title { font-size: 22px; font-weight: 700; margin-bottom: 8px; }
        .problem { font-size: 12.5px; margin-bottom: 20px; white-space: pre-wrap; }
        .diagram { display: flex; justify-content: center; align-items: center; }
        /* Scale SVG to fit width while maintaining aspect ratio */
        .diagram svg { max-width: 100%; height: auto; border: 1px solid #ddd; }
        footer { font-size: 11px; color: #666; margin-top: 24px; }
      </style>
    </head>
    <body>
      <div class="title">${escapeHtml(title)}</div>
      <div class="problem">${escapeHtml(problem)}</div>
      <div class="diagram">
        ${svg}
      </div>
      <footer>Generated by AI Architect Assistant</footer>
    </body>
  </html>
  `;

  const browser = await puppeteer.launch({
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });

  try {
    const page = await browser.newPage();
    await page.setContent(html, { waitUntil: 'networkidle0' });
    // wait a short time for any inline SVG layout to stabilize
    await new Promise(resolve => setTimeout(resolve, 200));

    const pdfBuffer = await page.pdf({
      format: 'A4',
      printBackground: true,
      margin: { top: '20mm', right: '15mm', bottom: '20mm', left: '15mm' }
    });

    return pdfBuffer;
  } finally {
    await browser.close();
  }
}

function escapeHtml(text) {
  if (!text) return '';
  return String(text)
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#039;');
}

module.exports = { generatePdfFromSvg };
